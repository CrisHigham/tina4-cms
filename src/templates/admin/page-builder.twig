{% set title = "Page Builder" %}
{% extends twigNameSpace ~ '/base.twig' %}
{% block headers %}
    <link rel="stylesheet" type="text/css" href="/css/default.css">
    <script src="https://unpkg.com/grapesjs-custom-code"></script>
    <script src="https://unpkg.com/grapesjs-component-code-editor"></script>
    <script src="https://unpkg.com/grapesjs-parser-postcss"></script>
    <script src="https://unpkg.com/grapesjs@0.21.2/dist/grapes.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/grapesjs/0.21.2/css/grapes.min.css"
          integrity="sha512-teZVIvNgTrmIIFs77Fs03dArj3HsJbQ6QMFRE5nAnt7etwO3wTgW2Z/1l6uvd1/TAycO68STs2QitYKzE2BqCg=="
          crossorigin="anonymous" referrerpolicy="no-referrer"/>
    <link rel="stylesheet" href="/css/page-builder.css">
{% endblock %}
{% block navigation %}
{% endblock %}
{% block content %}
    <div class="app-wrap">
        <div class="pages-wrp">
            <a class="exit-builder" href="/cms/dashboard">Back to CMS</a>
            <b>Choose Page</b>
            <div class="pages">
                <a href="#" onclick="loadPage('layout')">Page Layout</a>
                {% for page in pages %}
                    <a href="#" onclick="loadPage('{{ page.id }}')">{{ page.title }}</a>
                {% endfor %}
            </div>
        </div>
        <div class="editor-wrap">
            <div id="gjs"></div>
        </div>
    </div>
    {% if not session.user %}
        {% do redirect('/cms/login') %}
    {% endif %}
    <script>
        const editor = grapesjs.init({
            container: '#gjs',
            jsInHtml : false,
            allowScripts: true,
            canvas: {
                scripts: {{ Theme.Scripts(site.theme) | raw }},
                styles: {{ Theme.Styles(site.theme) | raw }},
            },
            plugins: ['grapesjs-custom-code', 'grapesjs-component-code-editor', 'grapesjs-parser-postcss'],
            assetManager: {
                    // Upload endpoint, set `false` to disable upload, default `false`
                    upload: '/cms/page-builder/assets/upload?siteId={{ site.id }}&formToken={{ formToken }}'
            },
            storageManager: {
                type: 'remote',
                stepsBeforeSave: 1,
                autosave: true,
                autoload: true,
                contentTypeJson: true,
                storeComponents: true,
                storeStyles: true,
                storeHtml: true,
                storeCss: true,
                options: {
                    remote: {
                        urlLoad: "/cms/page-builder/pages?siteId={{ site.id }}",
                        urlStore: "/cms/page-builder/pages?siteId={{ site.id }}&formToken={{ formToken }}",
                        onStore: data => ({
                            pageId: pageManager.getSelected().id,
                            html: editor.getHtml(),
                            css: editor.getCss(),
                            data: data
                        })
                    }
                }
            }

        });

        let pageManager = editor.Pages;
        let storageManager = editor.Storage;
        let panelManager = editor.Panels;

        //console.log('Panels', panelManager.getPanels());

        editor.Panels.addButton('options', [
            {id: 'undo', className: 'fa fa-undo', command: 'core:undo'},
            {id: 'redo', className: 'fa fa-repeat', command: 'core:redo'},
            {id: 'delete', className: 'fa fa-trash', command: 'core:canvas-clear'}
        ]);

        const panelViews = panelManager.addPanel({
            id: "views"
        });

        panelViews.get("buttons").add([
            {
                attributes: {
                    title: "Open Code"
                },
                className: "fa fa-file-code-o",
                command: "open-code",
                togglable: false, //do not close when button is clicked again
                id: "open-code"
            }
        ]);

        async function loadPage(pageId) {
            const data = editor.getProjectData();
            await storageManager.store(data);
            pageManager.select(pageId);
        }

        //editor.on('page', (event) => {
        //    console.log('Page changed', event);
        //});

        editor.on('load', (event) => {

                //const blockBtn = editor.Panels.getButton('views', 'open-blocks');
                //blockBtn.set('active', 1);
                //editor.runCommand('core:open-blocks');
        });

        // editor.on('save', (event) => {
        //    console.log('Page loading', event, event.page.getHtml());
        //});

        editor.on('rte:enable', () => {


        });

        const rte = editor.RichTextEditor;
        rte.add('openai', {
            icon: '<b>C</b>',
            attributes: {title: 'AI Enhance'},
            result: async function (rte) {
                let prompt = await rte.selection().toString();
                console.log (prompt);
                fetch('/cms/page-builder/open-ai?prompt='+rte.el.innerHTML)
                    .then(async function(response) {
                        const data = await response.text();
                        rte.el.innerHTML = data;
                    });
            }
        });


        // Get the BlockManager module first
        const blockManager = editor.Blocks; // `Blocks` is an alias of `BlockManager`


    </script>
    <!-- Add blocks -->
    {% set blocks = Theme.Blocks(site.theme) %}
    {% for block in blocks %}
        <script src="{{ block }}"></script>
    {% endfor %}
    <!-- Add components -->
    {% set components = Theme.Components(site.theme) %}
    {% for component in components %}
        <script src="{{ component }}"></script>
    {% endfor %}

{% endblock %}
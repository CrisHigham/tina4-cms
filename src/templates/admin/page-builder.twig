{% extends twigNameSpace ~ '/base.twig' %}
{% block headers %}
    <link rel="stylesheet" type="text/css" href="/css/default.css">
    <script src="https://unpkg.com/grapesjs-navbar"></script>
    <script src="https://unpkg.com/grapesjs@0.21.2/dist/grapes.min.js" ></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/grapesjs/0.21.2/css/grapes.min.css" integrity="sha512-teZVIvNgTrmIIFs77Fs03dArj3HsJbQ6QMFRE5nAnt7etwO3wTgW2Z/1l6uvd1/TAycO68STs2QitYKzE2BqCg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="/css/page-builder.css">
{% endblock %}
{% block navigation %}
{% endblock %}
{% block content %}
    <div class="app-wrap">
        <div class="pages-wrp">
            <a class="exit-builder" href="/cms/dashboard">Back to CMS</a>
            <b>Choose Page</b>
            <div class="pages">
                {% for page in pages %}
                <a href="#" onclick="loadPage('{{ page.id }}')">{{ page.title }}</a>
                {% endfor %}
            </div>
        </div>
        <div class="editor-wrap">
            <div id="gjs"></div>
        </div>
    </div>
    {% if not session.user %}
        {% do redirect('/cms/login') %}
    {% endif %}
        <script>
            const editor = grapesjs.init({
                container: '#gjs',
                canvas: {
                    scripts: {{ Theme.Scripts(site.theme) | raw }},
                    styles: {{ Theme.Styles(site.theme) | raw }},
                },
                plugins: ['grapesjs-navbar'],
                storageManager: {
                    type: 'remote',
                    stepsBeforeSave: 3,
                    autosave: true,
                    autoload: true,
                    contentTypeJson: true,
                    storeComponents: true,
                    storeStyles: true,
                    storeHtml: true,
                    storeCss: true,
                    options: {
                        remote: {
                            urlLoad: "/cms/page-builder/pages",
                            urlStore: "/cms/page-builder/pages?formToken={{ formToken }}",
                            onStore: data => ({pageId: pageManager.getSelected().id, html: editor.getHtml(), data: data})
                        }
                    }
                }

            });

            let pageManager = editor.Pages;
            let storageManager = editor.Storage;

            async function loadPage(pageId) {
                const data = editor.getProjectData();
                await storageManager.store(data);
                console.log('Page Saved', data);
                pageManager.select(pageId)
            }

            editor.on('page', (event) => {
                console.log('Page changed', event);
            });

            editor.on('load', (event) => {
                console.log('Page loading', event);
            });

            editor.on('save', (event) => {
                console.log('Page loading', event, event.page.getHtml());
            });


            // Get the BlockManager module first
            const blockManager = editor.Blocks; // `Blocks` is an alias of `BlockManager`

        </script>


    <!-- Add components -->
    {% set components = Theme.Components(site.theme) %}
    {% for component in components %}
        <script src="{{ component }}"></script>
    {% endfor %}
    <!-- Add blocks -->
    {% set blocks = Theme.Blocks(site.theme) %}
    {% for block in blocks %}
        <script src="{{ block }}"></script>
    {% endfor %}
{% endblock %}